import telebot
import json
import os
from telebot import types

# üîê –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã)
OWNER_ID = 123456789  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user_id
TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–¢–£–¢'
DB_PATH = 'database.json'

bot = telebot.TeleBot(TOKEN)
database = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã
if os.path.exists(DB_PATH):
    with open(DB_PATH, 'r', encoding='utf-8') as f:
        database = json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã
def save_database():
    with open(DB_PATH, 'w', encoding='utf-8') as f:
        json.dump(database, f, ensure_ascii=False, indent=2)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def find_prints_by_query(query):
    query = query.lower().replace(' ', '').replace('_', '')
    return {
        name: file_id
        for name, file_id in database.items()
        if query in name.lower().replace('_', '').replace(' ', '')
    }

@bot.message_handler(content_types=['document'])
def handle_file(message):
    user_id = message.from_user.id
    file_info = message.document
    file_name = file_info.file_name
    file_id = file_info.file_id

    if user_id != OWNER_ID:
        bot.reply_to(message, "‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã.")
        return

    if file_name in database:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ó–∞–º–µ–Ω–∏—Ç—å", callback_data=f"replace|{file_name}|{file_id}"),
            types.InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")
        )
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–∏–Ω—Ç —Å –∏–º–µ–Ω–µ–º {file_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?", reply_markup=markup)
    else:
        database[file_name] = file_id
        save_database()
        bot.reply_to(message, f"‚úÖ –ü—Ä–∏–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\nüìÑ {file_name}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.from_user.id != OWNER_ID:
        bot.answer_callback_query(call.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    if call.data.startswith("replace"):
        _, file_name, file_id = call.data.split('|')
        database[file_name] = file_id
        save_database()
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: {file_name}")
    elif call.data == "skip":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ")

@bot.message_handler(func=lambda message: True)
def handle_search(message):
    results = find_prints_by_query(message.text)
    if results:
        for name, file_id in results.items():
            bot.send_document(message.chat.id, file_id, caption=name)
    else:
        bot.reply_to(message, "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
